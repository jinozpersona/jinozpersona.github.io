<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://jinozpersona.github.io/</id><title>Persona</title><subtitle>GitHubPage with jekyll</subtitle> <updated>2022-03-07T23:05:10+09:00</updated> <author> <name>jinozpersona</name> <uri>https://jinozpersona.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://jinozpersona.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://jinozpersona.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 jinozpersona </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Practice Coding - Lv2 devon code golf problem</title><link href="https://jinozpersona.github.io/posts/coding-Lv2-devon-code-golf-problem-150char/" rel="alternate" type="text/html" title="Practice Coding - Lv2 devon code golf problem" /><published>2022-03-07T22:00:00+09:00</published> <updated>2022-03-07T22:00:00+09:00</updated> <id>https://jinozpersona.github.io/posts/coding-Lv2-devon-code-golf-problem-150char/</id> <content src="https://jinozpersona.github.io/posts/coding-Lv2-devon-code-golf-problem-150char/" /> <author> <name>{"name"=>"jinozpersona", "link"=>nil}</name> </author> <category term="Practice" /> <category term="Lv2" /> <summary> 디브온 코드골프 문제 디브온에서 미니대안언어축제가 진행되던 M2 밖에 텍스트큐브 부스에서 재미있는 코드골프 문제 풀기가 있었습니다. 150자 이하로 푸신 분들에게는 즉석에서 제공되는 원두커피와 텀블러가 상으로 주어졌다고 합니다. 문제는 아래와 같습니다. 이 결과가 나와야 하는데 언어 제약은 없답니다. * * * * * * * * ** ** * * * * * * * * 출처 : codingdojang platform : python 접근방법 replace binary normal algorithm List Comprehesion My Answer Clic... </summary> </entry> <entry><title>Practice Coding - Lv2 cycle length 3n+1 problem</title><link href="https://jinozpersona.github.io/posts/coding-Lv2-paul_erdos_3nPlus1_problem/" rel="alternate" type="text/html" title="Practice Coding - Lv2 cycle length 3n+1 problem" /><published>2022-02-27T13:00:00+09:00</published> <updated>2022-02-27T13:00:00+09:00</updated> <id>https://jinozpersona.github.io/posts/coding-Lv2-paul_erdos_3nPlus1_problem/</id> <content src="https://jinozpersona.github.io/posts/coding-Lv2-paul_erdos_3nPlus1_problem/" /> <author> <name>{"name"=>"jinozpersona", "link"=>nil}</name> </author> <category term="Practice" /> <category term="Lv2" /> <summary> 3n+1 Problem 어떤 정수 n에서 시작해, n이 짝수면 2로 나누고, 홀수면 3을 곱한 다음 1을 더한다. 이렇게 해서 새로 만들어진 숫자를 n으로 놓고, n=1 이 될때까지 같은 작업을 계속 반복한다. 예를 들어, n=22이면 다음과 같은 수열이 만들어진다. 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 n이라는 값이 입력되었을때 1이 나올때까지 만들어진 수의 개수(1을 포함)를 n의 사이클 길이라고 한다. 위에 있는 수열을 예로 들면 22의 사이클 길이는 16이다. i와 j라는 두개의 수가 주어졌을때, i와 j사이의 모든 수(i, j포함)에 대해 최대 사이클 길이를 구하라. 입력 예 1 10 100 200 201 210 900... </summary> </entry> <entry><title>Practice Coding - Lv2 number counting</title><link href="https://jinozpersona.github.io/posts/coding-Lv2-number-counting/" rel="alternate" type="text/html" title="Practice Coding - Lv2 number counting" /><published>2022-02-26T23:00:00+09:00</published> <updated>2022-02-26T23:00:00+09:00</updated> <id>https://jinozpersona.github.io/posts/coding-Lv2-number-counting/</id> <content src="https://jinozpersona.github.io/posts/coding-Lv2-number-counting/" /> <author> <name>{"name"=>"jinozpersona", "link"=>nil}</name> </author> <category term="Practice" /> <category term="Lv2" /> <summary> 구글 입사문제 중에서 1부터 10,000까지 8이라는 숫자가 총 몇번 나오는가? 8이 포함되어 있는 숫자의 갯수를 카운팅 하는 것이 아니라 8이라는 숫자를 모두 카운팅 해야 한다. (※ 예를들어 8808은 3, 8888은 4로 카운팅 해야 함) 출처 : codingdojang platform : python 접근방법 counting function number element separate &amp;amp; counting My Answer Click Here def counting_fun(input_num): input_num = str(input_num) cnt = 0 for element in input_num: ... </summary> </entry> <entry><title>Practice Coding - Lv2 Kaprekar Self-Number</title><link href="https://jinozpersona.github.io/posts/coding-Lv2-Kaprekar-self_number/" rel="alternate" type="text/html" title="Practice Coding - Lv2 Kaprekar Self-Number" /><published>2022-02-26T22:00:00+09:00</published> <updated>2022-02-26T22:00:00+09:00</updated> <id>https://jinozpersona.github.io/posts/coding-Lv2-Kaprekar-self_number/</id> <content src="https://jinozpersona.github.io/posts/coding-Lv2-Kaprekar-self_number/" /> <author> <name>{"name"=>"jinozpersona", "link"=>nil}</name> </author> <category term="Practice" /> <category term="Lv2" /> <summary> 넥슨 입사문제 중에서 d(91) = 9 + 1 + 91 = 101 이 때, n을 d(n)의 제네레이터(generator)라고 한다. 위의 예에서 91은 101의 제네레이터이다. 어떤 숫자들은 하나 이상의 제네레이터를 가지고 있는데, 101의 제네레이터는 91 뿐 아니라 100도 있다. 그런데 반대로, 제네레이터가 없는 숫자들도 있으며, 이런 숫자를 인도의 수학자 Kaprekar가 셀프 넘버(self-number)라 이름 붙였다. 예를 들어 1,3,5,7,9,20,31 은 셀프 넘버 들이다. 1 이상이고 5000 보다 작은 모든 셀프 넘버들의 합을 구하라. 출처 : codingdojang platform : python 접근방법 Kaprekar S... </summary> </entry> <entry><title>Coding Study - fibonacci_series</title><link href="https://jinozpersona.github.io/posts/coding-study-fibonacci_series/" rel="alternate" type="text/html" title="Coding Study - fibonacci_series" /><published>2022-02-17T12:00:00+09:00</published> <updated>2022-02-17T12:00:00+09:00</updated> <id>https://jinozpersona.github.io/posts/coding-study-fibonacci_series/</id> <content src="https://jinozpersona.github.io/posts/coding-study-fibonacci_series/" /> <author> <name>{"name"=>"jinozpersona", "link"=>nil}</name> </author> <category term="Coding" /> <category term="Study" /> <summary> 시저 암호 풀기 피보나치 수열 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, … platform : python 접근방법 fibonacci series algorithm function : f(t) = f(t-1) + f(t-2) try except : plus integer My Answer Click Here def fib_series(): fib_lists = [0, 1] while True: try: n = int(input("input target number:")) if n &amp;lt; 0: print("please in... </summary> </entry> </feed>
